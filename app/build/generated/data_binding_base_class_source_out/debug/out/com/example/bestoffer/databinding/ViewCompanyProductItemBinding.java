// Generated by view binder compiler. Do not edit!
package com.example.bestoffer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.example.bestoffer.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ViewCompanyProductItemBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final ImageView deleteProductIv;

  @NonNull
  public final TextView descriptionTv;

  @NonNull
  public final TextView name;

  @NonNull
  public final TextView priceTv;

  @NonNull
  public final ImageView productImageIv;

  private ViewCompanyProductItemBinding(@NonNull MaterialCardView rootView,
      @NonNull ImageView deleteProductIv, @NonNull TextView descriptionTv, @NonNull TextView name,
      @NonNull TextView priceTv, @NonNull ImageView productImageIv) {
    this.rootView = rootView;
    this.deleteProductIv = deleteProductIv;
    this.descriptionTv = descriptionTv;
    this.name = name;
    this.priceTv = priceTv;
    this.productImageIv = productImageIv;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ViewCompanyProductItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ViewCompanyProductItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.view_company_product_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ViewCompanyProductItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.deleteProductIv;
      ImageView deleteProductIv = rootView.findViewById(id);
      if (deleteProductIv == null) {
        break missingId;
      }

      id = R.id.descriptionTv;
      TextView descriptionTv = rootView.findViewById(id);
      if (descriptionTv == null) {
        break missingId;
      }

      id = R.id.name;
      TextView name = rootView.findViewById(id);
      if (name == null) {
        break missingId;
      }

      id = R.id.priceTv;
      TextView priceTv = rootView.findViewById(id);
      if (priceTv == null) {
        break missingId;
      }

      id = R.id.productImageIv;
      ImageView productImageIv = rootView.findViewById(id);
      if (productImageIv == null) {
        break missingId;
      }

      return new ViewCompanyProductItemBinding((MaterialCardView) rootView, deleteProductIv,
          descriptionTv, name, priceTv, productImageIv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
